#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestAccount.DataAccessLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TestDb")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserGroup(UserGroup instance);
    partial void UpdateUserGroup(UserGroup instance);
    partial void DeleteUserGroup(UserGroup instance);
    partial void InsertGroupPermession(GroupPermession instance);
    partial void UpdateGroupPermession(GroupPermession instance);
    partial void DeleteGroupPermession(GroupPermession instance);
    partial void InsertSystemPermession(SystemPermession instance);
    partial void UpdateSystemPermession(SystemPermession instance);
    partial void DeleteSystemPermession(SystemPermession instance);
    partial void InsertSystemUser(SystemUser instance);
    partial void UpdateSystemUser(SystemUser instance);
    partial void DeleteSystemUser(SystemUser instance);
    #endregion
		
		public dbDataContext() : 
				base(global::TestAccount.DataAccessLayer.Properties.Settings.Default.TestDbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserGroup> UserGroups
		{
			get
			{
				return this.GetTable<UserGroup>();
			}
		}
		
		public System.Data.Linq.Table<GroupPermession> GroupPermessions
		{
			get
			{
				return this.GetTable<GroupPermession>();
			}
		}
		
		public System.Data.Linq.Table<SystemPermession> SystemPermessions
		{
			get
			{
				return this.GetTable<SystemPermession>();
			}
		}
		
		public System.Data.Linq.Table<SystemUser> SystemUsers
		{
			get
			{
				return this.GetTable<SystemUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Secuirty.UserGroup")]
	public partial class UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _GroupName;
		
		private string _GroupDescription;
		
		private EntitySet<GroupPermession> _GroupPermessions;
		
		private EntitySet<SystemUser> _SystemUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnGroupDescriptionChanging(string value);
    partial void OnGroupDescriptionChanged();
    #endregion
		
		public UserGroup()
		{
			this._GroupPermessions = new EntitySet<GroupPermession>(new Action<GroupPermession>(this.attach_GroupPermessions), new Action<GroupPermession>(this.detach_GroupPermessions));
			this._SystemUsers = new EntitySet<SystemUser>(new Action<SystemUser>(this.attach_SystemUsers), new Action<SystemUser>(this.detach_SystemUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupDescription", DbType="NVarChar(MAX)")]
		public string GroupDescription
		{
			get
			{
				return this._GroupDescription;
			}
			set
			{
				if ((this._GroupDescription != value))
				{
					this.OnGroupDescriptionChanging(value);
					this.SendPropertyChanging();
					this._GroupDescription = value;
					this.SendPropertyChanged("GroupDescription");
					this.OnGroupDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_GroupPermession", Storage="_GroupPermessions", ThisKey="ID", OtherKey="UserGroupID")]
		public EntitySet<GroupPermession> GroupPermessions
		{
			get
			{
				return this._GroupPermessions;
			}
			set
			{
				this._GroupPermessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_SystemUser", Storage="_SystemUsers", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<SystemUser> SystemUsers
		{
			get
			{
				return this._SystemUsers;
			}
			set
			{
				this._SystemUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupPermessions(GroupPermession entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = this;
		}
		
		private void detach_GroupPermessions(GroupPermession entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = null;
		}
		
		private void attach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = this;
		}
		
		private void detach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Secuirty.GroupPermession")]
	public partial class GroupPermession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _SystemPermessionID;
		
		private System.Nullable<System.Guid> _UserGroupID;
		
		private object _PermessionValue;
		
		private EntityRef<UserGroup> _UserGroup;
		
		private EntityRef<SystemPermession> _SystemPermession;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSystemPermessionIDChanging(System.Nullable<System.Guid> value);
    partial void OnSystemPermessionIDChanged();
    partial void OnUserGroupIDChanging(System.Nullable<System.Guid> value);
    partial void OnUserGroupIDChanged();
    partial void OnPermessionValueChanging(object value);
    partial void OnPermessionValueChanged();
    #endregion
		
		public GroupPermession()
		{
			this._UserGroup = default(EntityRef<UserGroup>);
			this._SystemPermession = default(EntityRef<SystemPermession>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemPermessionID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SystemPermessionID
		{
			get
			{
				return this._SystemPermessionID;
			}
			set
			{
				if ((this._SystemPermessionID != value))
				{
					if (this._SystemPermession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemPermessionIDChanging(value);
					this.SendPropertyChanging();
					this._SystemPermessionID = value;
					this.SendPropertyChanged("SystemPermessionID");
					this.OnSystemPermessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserGroupID
		{
			get
			{
				return this._UserGroupID;
			}
			set
			{
				if ((this._UserGroupID != value))
				{
					if (this._UserGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserGroupIDChanging(value);
					this.SendPropertyChanging();
					this._UserGroupID = value;
					this.SendPropertyChanged("UserGroupID");
					this.OnUserGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermessionValue", DbType="Variant", UpdateCheck=UpdateCheck.Never)]
		public object PermessionValue
		{
			get
			{
				return this._PermessionValue;
			}
			set
			{
				if ((this._PermessionValue != value))
				{
					this.OnPermessionValueChanging(value);
					this.SendPropertyChanging();
					this._PermessionValue = value;
					this.SendPropertyChanged("PermessionValue");
					this.OnPermessionValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_GroupPermession", Storage="_UserGroup", ThisKey="UserGroupID", OtherKey="ID", IsForeignKey=true)]
		public UserGroup UserGroup
		{
			get
			{
				return this._UserGroup.Entity;
			}
			set
			{
				UserGroup previousValue = this._UserGroup.Entity;
				if (((previousValue != value) 
							|| (this._UserGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroup.Entity = null;
						previousValue.GroupPermessions.Remove(this);
					}
					this._UserGroup.Entity = value;
					if ((value != null))
					{
						value.GroupPermessions.Add(this);
						this._UserGroupID = value.ID;
					}
					else
					{
						this._UserGroupID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UserGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemPermession_GroupPermession", Storage="_SystemPermession", ThisKey="SystemPermessionID", OtherKey="ID", IsForeignKey=true)]
		public SystemPermession SystemPermession
		{
			get
			{
				return this._SystemPermession.Entity;
			}
			set
			{
				SystemPermession previousValue = this._SystemPermession.Entity;
				if (((previousValue != value) 
							|| (this._SystemPermession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemPermession.Entity = null;
						previousValue.GroupPermessions.Remove(this);
					}
					this._SystemPermession.Entity = value;
					if ((value != null))
					{
						value.GroupPermessions.Add(this);
						this._SystemPermessionID = value.ID;
					}
					else
					{
						this._SystemPermessionID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("SystemPermession");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Secuirty.SystemPermession")]
	public partial class SystemPermession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _PermissionName;
		
		private string _PersmessionDescription;
		
		private string _PersmessionObject;
		
		private string _PermessionProperty;
		
		private string _PermessionForm;
		
		private EntitySet<GroupPermession> _GroupPermessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPermissionNameChanging(string value);
    partial void OnPermissionNameChanged();
    partial void OnPersmessionDescriptionChanging(string value);
    partial void OnPersmessionDescriptionChanged();
    partial void OnPersmessionObjectChanging(string value);
    partial void OnPersmessionObjectChanged();
    partial void OnPermessionPropertyChanging(string value);
    partial void OnPermessionPropertyChanged();
    partial void OnPermessionFormChanging(string value);
    partial void OnPermessionFormChanged();
    #endregion
		
		public SystemPermession()
		{
			this._GroupPermessions = new EntitySet<GroupPermession>(new Action<GroupPermession>(this.attach_GroupPermessions), new Action<GroupPermession>(this.detach_GroupPermessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionName", DbType="NVarChar(50)")]
		public string PermissionName
		{
			get
			{
				return this._PermissionName;
			}
			set
			{
				if ((this._PermissionName != value))
				{
					this.OnPermissionNameChanging(value);
					this.SendPropertyChanging();
					this._PermissionName = value;
					this.SendPropertyChanged("PermissionName");
					this.OnPermissionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersmessionDescription", DbType="NVarChar(50)")]
		public string PersmessionDescription
		{
			get
			{
				return this._PersmessionDescription;
			}
			set
			{
				if ((this._PersmessionDescription != value))
				{
					this.OnPersmessionDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PersmessionDescription = value;
					this.SendPropertyChanged("PersmessionDescription");
					this.OnPersmessionDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersmessionObject", DbType="NVarChar(50)")]
		public string PersmessionObject
		{
			get
			{
				return this._PersmessionObject;
			}
			set
			{
				if ((this._PersmessionObject != value))
				{
					this.OnPersmessionObjectChanging(value);
					this.SendPropertyChanging();
					this._PersmessionObject = value;
					this.SendPropertyChanged("PersmessionObject");
					this.OnPersmessionObjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermessionProperty", DbType="NVarChar(50)")]
		public string PermessionProperty
		{
			get
			{
				return this._PermessionProperty;
			}
			set
			{
				if ((this._PermessionProperty != value))
				{
					this.OnPermessionPropertyChanging(value);
					this.SendPropertyChanging();
					this._PermessionProperty = value;
					this.SendPropertyChanged("PermessionProperty");
					this.OnPermessionPropertyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermessionForm", DbType="NVarChar(50)")]
		public string PermessionForm
		{
			get
			{
				return this._PermessionForm;
			}
			set
			{
				if ((this._PermessionForm != value))
				{
					this.OnPermessionFormChanging(value);
					this.SendPropertyChanging();
					this._PermessionForm = value;
					this.SendPropertyChanged("PermessionForm");
					this.OnPermessionFormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemPermession_GroupPermession", Storage="_GroupPermessions", ThisKey="ID", OtherKey="SystemPermessionID")]
		public EntitySet<GroupPermession> GroupPermessions
		{
			get
			{
				return this._GroupPermessions;
			}
			set
			{
				this._GroupPermessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupPermessions(GroupPermession entity)
		{
			this.SendPropertyChanging();
			entity.SystemPermession = this;
		}
		
		private void detach_GroupPermessions(GroupPermession entity)
		{
			this.SendPropertyChanging();
			entity.SystemPermession = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Secuirty.SystemUser")]
	public partial class SystemUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _UserName;
		
		private string _Pwd;
		
		private string _Status;
		
		private System.Nullable<System.Guid> _GroupID;
		
		private EntityRef<UserGroup> _UserGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPwdChanging(string value);
    partial void OnPwdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnGroupIDChanging(System.Nullable<System.Guid> value);
    partial void OnGroupIDChanged();
    #endregion
		
		public SystemUser()
		{
			this._UserGroup = default(EntityRef<UserGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pwd", DbType="NChar(6)")]
		public string Pwd
		{
			get
			{
				return this._Pwd;
			}
			set
			{
				if ((this._Pwd != value))
				{
					this.OnPwdChanging(value);
					this.SendPropertyChanging();
					this._Pwd = value;
					this.SendPropertyChanged("Pwd");
					this.OnPwdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._UserGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_SystemUser", Storage="_UserGroup", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public UserGroup UserGroup
		{
			get
			{
				return this._UserGroup.Entity;
			}
			set
			{
				UserGroup previousValue = this._UserGroup.Entity;
				if (((previousValue != value) 
							|| (this._UserGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroup.Entity = null;
						previousValue.SystemUsers.Remove(this);
					}
					this._UserGroup.Entity = value;
					if ((value != null))
					{
						value.SystemUsers.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UserGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
